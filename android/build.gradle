apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/io.netty.versions.properties'
        exclude 'simplelogger.properties'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'

artifactory {
    contextUrl = 'https://token.jfrog.io/token/'

    resolve {
        repository {
            repoKey = 'libs-release'             // The Artifactory repository key to download from
        }
    }

    publish {
        repository {
            // The Artifactory repository key to publish to
            if (version.endsWith("SNAPSHOT")) {
                repoKey = 'libs-snapshot-local'
            } else {
                repoKey = 'public-libs-release-local'
            }
            if (project.ext.properties.artifactory_user != null && project.ext.properties.artifactory_password != null) {
                username = "${artifactory_user}"     // The publisher user name
                password = "${artifactory_password}" // The publisher password
            }
        }
        defaults {
            publications('aar')
            publishArtifacts = true

            properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
            publishPom = true
        }
    }
}

repositories {
    mavenLocal()
    google()
    jcenter()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    compile(project(':user')){
        exclude group: 'com.google.api.grpc', module: 'proto-google-common-protos'
        exclude group: 'io.token.rpc', module: 'tokenio-rpc-client-lite-netty'
        exclude group: 'org.checkerframework' //, module: 'checker'
        exclude group: 'io.token.proto.extensions'
    }
    compile(group: 'io.token.rpc', name: 'tokenio-rpc-client-lite-okhttp', version: ver.tokenRpc) {
        exclude group: 'com.google.api.grpc', module:'proto-google-common-protos'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'org.checkerframework' //, module: 'checker'
        exclude group: 'io.token.proto.extensions'
    }
    compile('io.token.proto.extensions:tokenio-proto-extensions:1.0.4') {
        exclude group: 'com.google.guava', module: 'guava'
    }

    implementation 'com.android.support:appcompat-v7:26.1.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.assertj:assertj-core:3.13.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

archivesBaseName = 'tokenio-' + rootProject.name

if (rootProject.name != name) {
    archivesBaseName = archivesBaseName + '-' + name
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version version
            artifactId archivesBaseName
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/${artifactId}-release.aar")

            //generate pom nodes for dependencies
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.api.allDependencies.each { dependency ->
                    if (dependency.version != null) {
                        def artifactId = dependency.name
                        if (artifactId == 'user') {
                            artifactId = 'tokenio-' + rootProject.name + '-user'
                        }
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', artifactId)
                        dependencyNode.appendNode('version', dependency.version)
                    }
                }
            }
        }
    }
}

if (project.hasProperty("signing.keyId")) {
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }
}

apply from: 'https://raw.githubusercontent.com/sky-uk/gradle-maven-plugin/master/gradle-mavenizer.gradle'

tasks.withType(Javadoc) {
    failOnError false
}

configurations.all { configuration ->
    // Ignore ':lintClassPath' configuration as it has version conflicts.
    if (!"$configuration".contains(':lintClassPath') && !"$configuration".contains('Test')) {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }
}
